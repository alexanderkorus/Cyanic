//
//  TableComponentCell.swift
//  Cyanic
//
//  Created by Julio Miguel Alorro on 4/14/19.
//  Copyright Â© 2019 Feil, Feil, & Feil  GmbH. All rights reserved.
//

import LayoutKit
import UIKit

/**
 TableComponentCell serves as the root UIView for the UI elements generated by its Layout
*/
open class TableComponentCell: UITableViewCell {

    /**
     The String identifier used by the TableComponentCell to register to a UITableView instance
    */
    open class var identifier: String {
        return String(describing: Mirror(reflecting: self).subjectType)
    }

    // MARK: Layout
    /**
     The current ComponentLayout instance that created and arranged the subviews in the contentView of this TableComponentCell.
    */
    private var layout: ComponentLayout?

    override open func prepareForReuse() {
        super.prepareForReuse()
        self.layout = nil
    }

//    override public final func layoutSubviews() {
//
//        // Get the rect of the contentView in the main thread.
//        let bounds: CGRect = self.contentView.bounds
//
//        DispatchQueue.global(qos: DispatchQoS.QoSClass.userInitiated).async(execute: { () -> Void in
//            guard let layout = self.layout else { return }
//
//            // Do the size calculation in a background thread
//            let measurement: LayoutMeasurement = layout.measurement(
//                within: bounds.size
//            )
//
//            // Do the arrangement calculation in a background thread
//            let arrangement: LayoutArrangement = measurement
//                .arrangement(within: bounds)
//
//            // Size and place the subviews on the main thread
//            DispatchQueue.main.async(execute: { () -> Void in
//                arrangement.makeViews(in: self.contentView)
//            })
//        })
//    }

    override public final func sizeThatFits(_ size: CGSize) -> CGSize {
        guard let size = self.layout?.measurement(within: size).size else { return CGSize.zero }
        return size
    }

    override public final var intrinsicContentSize: CGSize {
        return self.sizeThatFits(
            CGSize(
                width: Constants.screenWidth,
                height: CGFloat.greatestFiniteMagnitude
            )
        )
    }

    /**
     Reads the layout from the AnyComponent instance to create the subviews in this TableComponentCell instance. This also
     sets the contentView.frame.size to the cell's intrinsicContentSize and calls setNeedsLayout.
     - Parameters:
        - component: The AnyComponent instance that represents this TableComponentCell
    */
    open func configure(with component: AnyComponent) {
        self.layout = component.layout
        self.contentView.frame.size = self.intrinsicContentSize

        self.layout?.arrangement(
            origin: self.contentView.frame.origin,
            width: self.contentView.frame.size.width,
            height: self.contentView.frame.size.height
            )
            .makeViews(in: self.contentView)
    }

}
